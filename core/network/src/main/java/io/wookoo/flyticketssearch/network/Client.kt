package io.wookoo.flyticketssearch.network

import android.content.Context
import android.util.Log
import io.wookoo.flyticketssearch.network.Consts.BASE_URL
import io.wookoo.flyticketssearch.network.Consts.CONNECT_TIMEOUT
import io.wookoo.flyticketssearch.network.Consts.MOCK_FILES_PATH
import io.wookoo.flyticketssearch.network.Consts.READ_TIMEOUT
import io.wookoo.flyticketssearch.network.Consts.WRITE_TIMEOUT
import ir.logicbase.mockfit.MockFitConfig.REQUEST_TO_JSON
import ir.logicbase.mockfit.MockFitInterceptor
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import java.util.concurrent.TimeUnit

class Client(private val context: Context) {

    val networkClient: OkHttpClient = OkHttpClient.Builder()
        .addInterceptor(HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))
        .addInterceptor(provideMockFitInterceptor())
        .connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)
        .writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)
        .readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)
        .build()

    private fun provideMockFitInterceptor() = MockFitInterceptor(
        bodyFactory = { input -> context.resources.assets.open(input) }, // read asset file
        logger = { tag, message -> Log.d(tag, message) }, // pass logger to log events in logcat
        baseUrl = BASE_URL, // base url of your api
        requestPathToMockPathRule = REQUEST_TO_JSON, // autogenerated constant, just press build button
        mockFilesPath = MOCK_FILES_PATH, // path to json files
        mockFitEnable = true, // master setting to enable or disable mocking
        apiEnableMock = true, // enable or disable mock when there are includes and excludes configs
        apiIncludeIntoMock = arrayOf(), // include endpoint if `apiEnableMock` is false
        apiExcludeFromMock = arrayOf(), // exclude endpoint if `apiEnableMock` is true
        apiResponseLatency = 500L // latency of retrieving data
    )
}
